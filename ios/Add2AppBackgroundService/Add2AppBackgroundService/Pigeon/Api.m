// Autogenerated from Pigeon (v2.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "Api.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface LNCDComputationNotification ()
+ (LNCDComputationNotification *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation LNCDComputationNotification
+ (instancetype)makeWithTitle:(NSString *)title
    message:(NSString *)message
    percentProgress:(NSNumber *)percentProgress {
  LNCDComputationNotification* pigeonResult = [[LNCDComputationNotification alloc] init];
  pigeonResult.title = title;
  pigeonResult.message = message;
  pigeonResult.percentProgress = percentProgress;
  return pigeonResult;
}
+ (LNCDComputationNotification *)fromMap:(NSDictionary *)dict {
  LNCDComputationNotification *pigeonResult = [[LNCDComputationNotification alloc] init];
  pigeonResult.title = GetNullableObject(dict, @"title");
  NSAssert(pigeonResult.title != nil, @"");
  pigeonResult.message = GetNullableObject(dict, @"message");
  NSAssert(pigeonResult.message != nil, @"");
  pigeonResult.percentProgress = GetNullableObject(dict, @"percentProgress");
  NSAssert(pigeonResult.percentProgress != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.title ? self.title : [NSNull null]), @"title", (self.message ? self.message : [NSNull null]), @"message", (self.percentProgress ? self.percentProgress : [NSNull null]), @"percentProgress", nil];
}
@end

@interface LNCDNativeMainApiCodecReader : FlutterStandardReader
@end
@implementation LNCDNativeMainApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [LNCDComputationNotification fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface LNCDNativeMainApiCodecWriter : FlutterStandardWriter
@end
@implementation LNCDNativeMainApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[LNCDComputationNotification class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface LNCDNativeMainApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation LNCDNativeMainApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[LNCDNativeMainApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[LNCDNativeMainApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *LNCDNativeMainApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    LNCDNativeMainApiCodecReaderWriter *readerWriter = [[LNCDNativeMainApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void LNCDNativeMainApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<LNCDNativeMainApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.NativeMainApi.startService"
        binaryMessenger:binaryMessenger
        codec:LNCDNativeMainApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startServiceNotification:error:)], @"LNCDNativeMainApi api (%@) doesn't respond to @selector(startServiceNotification:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        LNCDComputationNotification *arg_notification = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api startServiceNotification:arg_notification error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.NativeMainApi.stopService"
        binaryMessenger:binaryMessenger
        codec:LNCDNativeMainApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopServiceWithError:)], @"LNCDNativeMainApi api (%@) doesn't respond to @selector(stopServiceWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api stopServiceWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface LNCDNativeDialogApiCodecReader : FlutterStandardReader
@end
@implementation LNCDNativeDialogApiCodecReader
@end

@interface LNCDNativeDialogApiCodecWriter : FlutterStandardWriter
@end
@implementation LNCDNativeDialogApiCodecWriter
@end

@interface LNCDNativeDialogApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation LNCDNativeDialogApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[LNCDNativeDialogApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[LNCDNativeDialogApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *LNCDNativeDialogApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    LNCDNativeDialogApiCodecReaderWriter *readerWriter = [[LNCDNativeDialogApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void LNCDNativeDialogApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<LNCDNativeDialogApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.NativeDialogApi.closeDialog"
        binaryMessenger:binaryMessenger
        codec:LNCDNativeDialogApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(closeDialogWithError:)], @"LNCDNativeDialogApi api (%@) doesn't respond to @selector(closeDialogWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api closeDialogWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface LNCDNativeBackgroundServiceApiCodecReader : FlutterStandardReader
@end
@implementation LNCDNativeBackgroundServiceApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [LNCDComputationNotification fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface LNCDNativeBackgroundServiceApiCodecWriter : FlutterStandardWriter
@end
@implementation LNCDNativeBackgroundServiceApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[LNCDComputationNotification class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface LNCDNativeBackgroundServiceApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation LNCDNativeBackgroundServiceApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[LNCDNativeBackgroundServiceApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[LNCDNativeBackgroundServiceApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *LNCDNativeBackgroundServiceApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    LNCDNativeBackgroundServiceApiCodecReaderWriter *readerWriter = [[LNCDNativeBackgroundServiceApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void LNCDNativeBackgroundServiceApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<LNCDNativeBackgroundServiceApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.NativeBackgroundServiceApi.stopService"
        binaryMessenger:binaryMessenger
        codec:LNCDNativeBackgroundServiceApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopServiceWithError:)], @"LNCDNativeBackgroundServiceApi api (%@) doesn't respond to @selector(stopServiceWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api stopServiceWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.NativeBackgroundServiceApi.openDialog"
        binaryMessenger:binaryMessenger
        codec:LNCDNativeBackgroundServiceApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(openDialogWithError:)], @"LNCDNativeBackgroundServiceApi api (%@) doesn't respond to @selector(openDialogWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api openDialogWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.NativeBackgroundServiceApi.updateNotification"
        binaryMessenger:binaryMessenger
        codec:LNCDNativeBackgroundServiceApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateNotificationNotification:error:)], @"LNCDNativeBackgroundServiceApi api (%@) doesn't respond to @selector(updateNotificationNotification:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        LNCDComputationNotification *arg_notification = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api updateNotificationNotification:arg_notification error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
